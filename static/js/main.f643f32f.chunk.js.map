{"version":3,"sources":["components/ToDoList/AddTask.js","components/ToDoList/Task.js","components/ToDoList/TaskList.js","components/ToDoList/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","marginLeft","marginRight","display","alignItems","width","marginBottom","input","spacing","flex","iconButton","padding","divider","height","margin","AddTask","props","classes","useState","taskInput","setTaskInput","Paper","component","className","InputBase","value","onChange","e","target","placeholder","IconButton","type","onClick","preventDefault","addTask","prev","newState","id","Math","random","task","console","log","justifyContent","checked","textDecorationLine","grid","color","Task","isChecked","setIsChecked","Grid","container","justify","item","xs","Checkbox","event","onCheckHandler","Typography","variant","setTask","filter","TaskList","List","tasks","map","index","ListItem","length","key","ToDoList","setTasks","style","textAlign","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gUAKMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACLC,WAAY,OACZC,YAAa,OACbC,QAAS,OACTC,WAAY,SACZC,MAAO,IACPC,aAAc,SAEfC,MAAO,CACNN,WAAYF,EAAMS,QAAQ,GAC1BC,KAAM,GAEPC,WAAY,CACXC,QAAS,IAEVC,QAAS,CACRC,OAAQ,GACRC,OAAQ,OAmCKC,EA/BC,SAAAC,GACf,IAAMC,EAAUpB,IADQ,EAEUqB,mBAAS,IAFnB,mBAEjBC,EAFiB,KAENC,EAFM,KAcxB,OACC,kBAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,UAAWN,EAAQjB,MAC1C,kBAACwB,EAAA,EAAD,CACCC,MAAON,EACPO,SAAU,SAAAC,GACTP,EAAaO,EAAEC,OAAOH,QAEvBI,YAAY,WACZN,UAAWN,EAAQV,QAEpB,kBAACuB,EAAA,EAAD,CAAYC,KAAK,SAASC,QAAS,SAAAL,GAAC,OAAmBA,EAnBlDM,iBACNjB,EAAMkB,SAAQ,SAAAC,GACb,IAAMC,EAAQ,sBAAOD,GAAP,CAAa,CAAEE,GAAIC,KAAKC,SAAUC,KAAMrB,KAEtD,OADAsB,QAAQC,IAAIN,GACLA,UAERhB,EAAa,MAcX,kBAAC,IAAD,S,yDC/CEvB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACLG,QAAS,OACTwC,eAAgB,YAGjBC,QAAS,CACRC,mBAAoB,gBAGrBC,KAAM,CACLC,MAAO,eAsDMC,EAlDF,SAAAhC,GAAU,IAAD,EACaE,oBAAS,GADtB,mBACd+B,EADc,KACHC,EADG,KAEfjC,EAAUpB,IAYhB,OACC,kBAACsD,EAAA,EAAD,CACCC,WAAS,EACTC,QAAQ,gBACRjD,WAAW,SACXmB,UAAWN,EAAQ6B,MAEnB,kBAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACd,kBAACC,EAAA,EAAD,CACCZ,QAASK,EACTvB,SAAU,SAAA+B,IApBS,SAAAA,GACtBP,EAAaO,EAAM7B,OAAOgB,SAoBtBc,CAAeD,OAIlB,kBAACN,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACd,kBAACI,EAAA,EAAD,CACCpC,UAAW0B,EAAYhC,EAAQ2B,QAAU,KACzCgB,QAAQ,MAEP5C,EAAMwB,OAGT,kBAACW,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGhC,UAAWN,EAAQjB,MACpC,kBAAC8B,EAAA,EAAD,CACCE,QAAS,WA/BW,IAAAK,IAgCHrB,EAAMqB,GA/B1BrB,EAAM6C,SAAQ,SAAA1B,GACb,OAAOA,EAAK2B,QAAO,SAAAtB,GAAI,OAAIA,EAAKH,KAAOA,UAiCrC,kBAAC,IAAD,UCtCU0B,EArBE,SAAA/C,GAChB,OACC,kBAACK,EAAA,EAAD,KACC,kBAAC2C,EAAA,EAAD,KACEhD,EAAMiD,MAAMC,KAAI,SAAC1B,EAAM2B,GAAP,OAChB,kBAACC,EAAA,EAAD,CACCxD,QAASuD,IAAUnD,EAAMiD,MAAMI,OAAS,EACxCC,IAAK9B,EAAKH,IAEV,kBAAC,EAAD,CACCG,KAAMA,EAAKA,KACXH,GAAIG,EAAKH,GACTwB,QAAS7C,EAAM6C,iBCGPU,EAfE,SAAAvD,GAAU,IAAD,EACCE,mBAAS,CAClC,CAAEmB,GAAIC,KAAKC,SAAUC,KAAM,OAC3B,CAAEH,GAAIC,KAAKC,SAAUC,KAAM,UAHH,mBAClByB,EADkB,KACXO,EADW,KAMzB,OACC,6BACC,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,8BACA,kBAAC,EAAD,CAAST,MAAOA,EAAO/B,QAASsC,IAC/BP,EAAMI,OAAS,GAAK,kBAAC,EAAD,CAAUJ,MAAOA,EAAOJ,QAASW,MCD1CG,MARf,WACC,OACC,kBAACC,EAAA,EAAD,CAAWC,SAAS,MACnB,kBAAC,EAAD,QCIiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.f643f32f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Paper, InputBase, IconButton } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tmarginLeft: 'auto',\r\n\t\tmarginRight: 'auto',\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\twidth: 400,\r\n\t\tmarginBottom: '1.5em'\r\n\t},\r\n\tinput: {\r\n\t\tmarginLeft: theme.spacing(1),\r\n\t\tflex: 1\r\n\t},\r\n\ticonButton: {\r\n\t\tpadding: 10\r\n\t},\r\n\tdivider: {\r\n\t\theight: 28,\r\n\t\tmargin: 4\r\n\t}\r\n}));\r\n\r\nconst AddTask = props => {\r\n\tconst classes = useStyles();\r\n\tconst [taskInput, setTaskInput] = useState('');\r\n\r\n\tconst addTaskHandler = event => {\r\n\t\tevent.preventDefault();\r\n\t\tprops.addTask(prev => {\r\n\t\t\tconst newState = [...prev, { id: Math.random(), task: taskInput }];\r\n\t\t\tconsole.log(newState);\r\n\t\t\treturn newState;\r\n\t\t});\r\n\t\tsetTaskInput('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Paper component=\"form\" className={classes.root}>\r\n\t\t\t<InputBase\r\n\t\t\t\tvalue={taskInput}\r\n\t\t\t\tonChange={e => {\r\n\t\t\t\t\tsetTaskInput(e.target.value);\r\n\t\t\t\t}}\r\n\t\t\t\tplaceholder=\"Add Task\"\r\n\t\t\t\tclassName={classes.input}\r\n\t\t\t/>\r\n\t\t\t<IconButton type=\"submit\" onClick={e => addTaskHandler(e)}>\r\n\t\t\t\t<AddIcon />\r\n\t\t\t</IconButton>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n\r\nexport default AddTask;\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Checkbox, Typography, IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'flex-end'\r\n\t},\r\n\r\n\tchecked: {\r\n\t\ttextDecorationLine: 'line-through'\r\n\t},\r\n\r\n\tgrid: {\r\n\t\tcolor: '#5f5358'\r\n\t}\r\n}));\r\n\r\nconst Task = props => {\r\n\tconst [isChecked, setIsChecked] = useState(false);\r\n\tconst classes = useStyles();\r\n\r\n\tconst onCheckHandler = event => {\r\n\t\tsetIsChecked(event.target.checked);\r\n\t};\r\n\r\n\tconst onDeleteHandler = id => {\r\n\t\tprops.setTask(prev => {\r\n\t\t\treturn prev.filter(task => task.id !== id);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Grid\r\n\t\t\tcontainer\r\n\t\t\tjustify=\"space-between\"\r\n\t\t\talignItems=\"center\"\r\n\t\t\tclassName={classes.grid}\r\n\t\t>\r\n\t\t\t<Grid item xs={2}>\r\n\t\t\t\t<Checkbox\r\n\t\t\t\t\tchecked={isChecked}\r\n\t\t\t\t\tonChange={event => {\r\n\t\t\t\t\t\tonCheckHandler(event);\r\n\t\t\t\t\t}}\r\n\t\t\t\t></Checkbox>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={6}>\r\n\t\t\t\t<Typography\r\n\t\t\t\t\tclassName={isChecked ? classes.checked : null}\r\n\t\t\t\t\tvariant=\"h6\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.task}\r\n\t\t\t\t</Typography>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={3} className={classes.root}>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tonDeleteHandler(props.id);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<DeleteIcon></DeleteIcon>\r\n\t\t\t\t</IconButton>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport { Paper, List, ListItem } from '@material-ui/core';\r\nimport Task from './Task';\r\n\r\nconst TaskList = props => {\r\n\treturn (\r\n\t\t<Paper>\r\n\t\t\t<List>\r\n\t\t\t\t{props.tasks.map((task, index) => (\r\n\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\tdivider={index !== props.tasks.length - 1}\r\n\t\t\t\t\t\tkey={task.id}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Task\r\n\t\t\t\t\t\t\ttask={task.task}\r\n\t\t\t\t\t\t\tid={task.id}\r\n\t\t\t\t\t\t\tsetTask={props.setTask}\r\n\t\t\t\t\t\t></Task>\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t))}\r\n\t\t\t</List>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { useState } from 'react';\r\nimport AddTask from './AddTask';\r\nimport TaskList from './TaskList';\r\n\r\nconst ToDoList = props => {\r\n\tconst [tasks, setTasks] = useState([\r\n\t\t{ id: Math.random(), task: 'Gym' },\r\n\t\t{ id: Math.random(), task: 'Cook' }\r\n\t]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1 style={{ textAlign: 'center' }}>Learning React: To Do List</h1>\r\n\t\t\t<AddTask tasks={tasks} addTask={setTasks} />\r\n\t\t\t{tasks.length > 0 && <TaskList tasks={tasks} setTask={setTasks} />}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\nimport './App.css';\nimport { Container } from '@material-ui/core';\nimport ToDoList from './components/ToDoList/ToDoList';\n\nfunction App() {\n\treturn (\n\t\t<Container maxWidth=\"sm\">\n\t\t\t<ToDoList></ToDoList>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}